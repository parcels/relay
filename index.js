// Generated by CoffeeScript 1.7.1
(function() {
  var Q, app, createSoapClient, dotenv, express, fetchRussianPost, fetchUSPS, http, logger, port, respond, soap, wsdl, xml2js;

  soap = require('soap');

  Q = require('q');

  http = require('q-io/http');

  xml2js = require('xml2json');

  express = require('express');

  logger = require('winston');

  dotenv = require('dotenv');

  dotenv.load();

  wsdl = './lib/russianpost/wsdl/russianpost_1.wsdl';

  createSoapClient = Q.nfcall(soap.createClient, wsdl)["catch"](function(err) {
    return logger.error(err);
  });

  fetchRussianPost = function(client) {
    return function(trackId) {
      var message;
      message = {
        Barcode: trackId,
        MessageType: 0
      };
      return Q.nfcall(client.GetOperationHistory, message);
    };
  };

  fetchUSPS = function(trackId) {
    var message, url;
    url = "http://production.shippingapis.com/ShippingAPI.dll?API=TrackV2&XML=";
    message = {
      TrackFieldRequest: {
        USERID: process.env.USPS_USER_ID,
        TrackID: {
          ID: trackId
        }
      }
    };
    return http.request(url + xml2js.toXml(message)).then(function(response) {
      return response.body.read();
    }).then(function(body) {
      return Q(xml2js.toJson(body, {
        object: true
      }));
    });
  };

  respond = function(fn) {
    return function(req, res) {
      return fn(req.params.trackId).then(function(result) {
        if (result) {
          return res.json(result);
        } else {
          return res.send(404);
        }
      })["catch"](function(err) {
        logger.error(err);
        return res.json(500, {
          error: err
        });
      });
    };
  };

  app = express();

  app.use(express.compress());

  createSoapClient.done(function(client) {
    app.get('/russianpost/:trackId', respond(fetchRussianPost(client)));
    return logger.info('RussianPost client established');
  });

  app.get('/usps/:trackId', respond(fetchUSPS));

  logger.info('USPS client established');

  port = process.env.PORT || 3000;

  app.listen(port);

  logger.info("Listening on port " + port);

}).call(this);
